# TODO:
# ( ) Employ $FUNCNAME ?

# WARNING!
# bash sets history state immediately when HISTSIZE et al are set. Therefore it
# is not sufficient to override these variables, you must comment out previous
# occurrences of them.
# What was happening was on boot .bashrc would set the defaults, immediately
# configure the state including truncating the .bash_history file to the default
# size, then use my new history values. This effectively meant I wasn't getting
# unlimited history like I wanted, just the default amount of history. :-(
#
# All the history!
# ( ) Detect when there are existing versions of the variables and flag a warning
export HISTCONTROL=ignoreboth
export HISTSIZE=-1
export HISTFILESIZE=-1
#export HISTTIMEFORMAT="%Y-%m-%d %H:%M:%S  "
export HISTTIMEFORMAT="$(tput setaf 6)%F %T$(tput sgr0)  "

# Hack to make one terminal's history immediately available to other terminals
# append to history file, clear local history, reread history from file
#export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
#export PROMPT_COMMAND='export PS1=$(gitprompt.pl)'

# __git_ps1() under Git for Windows takes so so long; timed it at 3 seconds.
# Remove it from the prompt for now.
# Actually, added a custom .config/git/git-prompt.sh which overrides the
# shipped one.

# Turn off flow control; ctrl-s and ctrl-q won't stop/start output anymore, but bash's forward
# history search ctrl-s will work
stty -ixon

### This is superceded by the .dircolors detection in .bashrc
###if [ -n "$DISPLAY" ] && [ "$TERM" == "xterm" ]; then
###   export TERM=gnome-256color
###   export COLORTERM=gnome-256color
###   if [ -e $HOME/.dir_colors/dircolors ]; then
###      eval $(dircolors -b $HOME/.dir_colors/dircolors)
###   fi
###fi

###Exit code in prompt
###https://unix.stackexchange.com/a/470042/173210

# Fix Ubuntu security holes
# Affected: 14.04 16.04 18.04 20.04
PATH=${PATH//$HOME\/bin:}
PATH+=":$HOME/bin"
if [ ! -d "$HOME/bin" ] ; then
    mkdir "$HOME/bin"
fi
PATH=${PATH//$HOME\/.local\/bin:}
PATH+=":$HOME/.local/bin"
if [ ! -d "$HOME/.local/bin" ]; then
    mkdir "$HOME/.local/bin"
fi
export PATH
export LANG="C.UTF-8"
export LANGUAGE="C.UTF-8"
export EDITOR=vim
export VISUAL=vim

alias d='ls -aCF'
alias dir='ls -alF'
alias ddir='ls -alFd'
alias dirs='ls -alF --color=always | grep --color=never "^d"'
alias prune='rm -rf'
alias cls='clear'
alias spath='echo $PATH | tr : "\n"'
alias abspath='readlink -f'
alias svim='sudo vim'
alias gitk='gitk --all &'
alias gitr='cd $(git root)'
alias tree='/usr/bin/tree -a'
# --use-gl=osmesa is a workaround to prevent Chrome 68 from spamming syslog with
# Aug 22 07:21:40 L247 org.gnome.Shell.desktop[3587]: [3958:3958:0822/072140.780496:ERROR:gl_surface_presentation_helper.cc(115)] GetVSyncParametersIfAvailable() failed!
# messages. The actual value isn't important, as long as it prevents whatever the existing default is from being used.
# Chrome 69 apparently has a fix for this, see https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=901831
#alias chrome='/opt/google/chrome/chrome --use-gl=osmesa'
#alias chromenw='/opt/google/chrome/chrome --use-gl=osmesa --new-window'
alias chromenw='/opt/google/chrome/chrome --new-window'
alias chromedt='/opt/google/chrome/chrome --auto-open-devtools-for-tabs'
alias eognw='eog --new-instance'
alias curldl='curl -OJL'
alias studio='studio.sh'
alias mu0='minicom -D /dev/ttyUSB0'
alias mu1='minicom -D /dev/ttyUSB1'
alias mcu0='minicom -D /dev/ttyUSB0 -C minicom-0.log'
alias mcu1='minicom -D /dev/ttyUSB1 -C minicom-1.log'

# Overriding the default alias from .bashrc, so preserve the color setting
alias grep='grep --color=auto --exclude=tags --exclude=cscope.out'
alias cpptags='ctags --c++-kinds=+p --fields=+iaS --extras=+q --language-force=C++'

# dig will accept the last timeout as the real one, so the flag in the alias can be overridden
# dig is also making 3 distinct lookups each with its own timeout, not sure what's going on there
alias mdig='dig @224.0.0.251 -p 5353 +timeout=1'
alias pssh='parallel-ssh'

alias sysinfo='sudo inxi -Fxxxrz'

# Work around a bug in bash completion where 'time svn cleanup <tab>' causes an infinite loop of
# bash: compopt: -o: option requires an argument
# compopt: usage: compopt [-o|+o option] [-DE] [name ...]
# What's more fun is there's no documentation on what this actually does; I *guess* that it turns off bash's autocompletion for
# svn.
complete -cf svn

# Trim utility from http://stackoverflow.com/a/7486606
trim() {
   # Determine if 'extglob' is currently on
   local extglobWasOff=1
   shopt extglob >/dev/null && extglobWasOff=0
   (( extglobWasOff )) && shopt -s extglob # Turn 'extglob' on, if currently turned off
   # Trim leading and trailing whitespace
   local var=$1
   var=${var##+([[:space:]])}
   var=${var%%+([[:space:]])}
   (( extglobWasOff )) && shopt -u extglob # If 'extglob' was off before, turn it back off
   echo -n "$var"
}

# Function / something for making case insensitive ls
###ils() {
###}

javad() {
   if [ -z "$1" ]; then
      echo "Error: Missing jar file"
      return 1;
   else
      JAR_FILE="$1"
   fi
   if [ -z "$2" ]; then
      OUTPUT_DIR=`echo "$JAR_FILE" | perl -pe "s/\.jar$//"`
   else
      OUTPUT_DIR="$2"
   fi

   java -jar ~/bin/procyon-decompiler-0.5.30.jar -jar "$JAR_FILE" -o "$OUTPUT_DIR"
}

# Note: This was written for busybox-bash. Clean it up for regular bash
timeout() {
   # This is important to clean up jobs if ctrl-c is pressed
   # NOTE: Do not wait here! Empirically, the waits below clean up things and an
   #       extra wait here causes Busybox bash to segfault. Whee!
   trap 'kill -TERM $(jobs -pr)' INT TERM EXIT
   delay=$1
   shift
   ( "$@" ) &
   cmdpid=$!
   ( sleep $delay && kill -TERM $cmdpid ) 2> /dev/null &
   tmopid=$!
   wait $cmdpid 2> /dev/null
   cmdret=$?
   # bash sets the exit value of an interrupted process to 128 + <signal>
   # SIGTERM is 15, so that's 143, but use -lt to handle other signals too
   if [ $cmdret -lt 128 ]; then
      # Command ran to completion (success for timeout's purposes) so kill the
      # timer
      kill -TERM $tmopid
   fi
   wait $tmopid 2> /dev/null
   return $cmdret
}

# VBoxManage setextradata global GUI/Fullscreen/LegacyMode 1/true

evi() {
   if [ -z "$1" ]; then
       echo "No file specified"
   else
       evince "$1" > /dev/null 2>&1 &
    fi
}

clear_crash() {
   sudo rm -f /var/crash/.lock /var/crash/_* /var/crash/susres.*
   dir /var/crash
}

lcd_off() {
   xset dpms force off
}

mcd() {
   if [ ! -d "$1" ]; then
      mkdir -p "$1"
   else
      echo "$1 already exists"
   fi
   cd "$1"
}

gccwarns() {
   gcc -Q --help=warning
}
gccmacros() {
   gcc -dM -E - < /dev/null
}

start_routing() {
   ipfw_enabled=$(sudo cat /proc/sys/net/ipv4/ip_forward)
   if [ $ipfw_enabled -ne 1 ]; then
      echo "Please check 'net.ipv4.ip_forward' in /etc/sysctl.conf"
      echo "/proc/sys/net/ipv4/ip_forward reported '$ipfw_enabled'"
   else
      sudo iptables-restore < /etc/iptables/rules.v4
      ##sudo service isc-dhcp-server restart
      ##sleep 4
      # Ubuntu 18.04 service doesn't pass through --no-pager, which must be a new addition to systemctl
      #sudo service isc-dhcp-server status
      sudo systemctl --no-pager status isc-dhcp-server
   fi
}

#countdown(){
#    date1=$((`date +%s` + $1));
#    while [ "$date1" -ge `date +%s` ]; do
#    ## Is this more than 24h away?
#    days=$(($(($(( $date1 - $(date +%s))) * 1 ))/86400))
#    echo -ne "$days day(s) and $(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
#    sleep 0.1
#    done
#}

stopwatch(){
    date1=`date +%s`;
    while true; do
    days=$(( $(($(date +%s) - date1)) / 86400 ))
    echo -ne "$days day(s) and $(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r";
    sleep 0.1
    done
}

is_number() {
   if [ -z "${1##*[!0-9]*}" ]; then
      return 1
   fi
   return 0
}

get_next_fd() {
   fd_max=$(ulimit -n)
   fd=0
   while [ $fd -lt $fd_max ] && [ -e /proc/$$/fd/$fd ]; do
      ((fd++))
   done
   if [ $fd -eq $fd_max ]; then
      echo "-1"
   else
      echo "$fd"
   fi
}

lock_init() {
   lock_file="$1"
   if [ -z "$lock_file" ] || [ ! -f "$lock_file" ]; then
      echo "-1"
      return
   fi
   lock_fd=$(get_next_fd)
   if [ $lock_fd -ne -1 ]; then
      eval "exec ${lock_fd}>>${lock_file}"
      if [ $? -ne 0 ]; then
         lock_fd=-1
      fi
   fi
   echo "$lock_fd"
}

# using xinput to control the sensitivity of a wireless moure
#xinput --list
#xinput --list-props 17
#xinput set-prop 17 263 1.3

###tame_mouse() {
###    if [ -z "$1" ]; then
###        echo "Error: Missing deceleration value"
###        return 1
###    fi
###    id=$(xinput --list | grep "Logitech USB Receiver.*slave  pointer" | cut -d'=' -f2 | cut -f1)
###    if [ -z "$id" ]; then
###        return 0
###    fi
###    prop=$(xinput list-props $id | grep "Device Accel Constant Deceleration" | cut -d'(' -f2 | cut -d')' -f1)
###    xinput set-prop $id $prop $1
###    #xinput list-props $id | grep "Device Accel Constant Deceleration" | grep "[[:digit:]\.]\+$"
###}
###tame_mouse 1.3

purge_old_kernels() {
    # Use with caution
    dpkg --list | grep linux-image | awk '{ print $2 }' | sort -V | sed -n '/'`uname -r`'/q;p' | xargs sudo apt-get -y purge
}

gohd() {
# From edid in monitor (bad checksum):
#   sudo xrandr --newmode "1920x1080_60.00"  148.50  1920 2008 2052 2200  1080 1084 1089 1125 +hsync +vsync
    sudo xrandr --newmode "1920x1080_60.00"  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync
    sudo xrandr --addmode DVI-I-1-1 "1920x1080_60.00"
    sudo xrandr --addmode DVI-I-2-2 "1920x1080_60.00"
    #sudo xrandr --output DVI-I-1-1 --mode 1920x1080_60.00 --right-of eDP-1
    #sudo xrandr --output DVI-I-2-2 --mode 1920x1080_60.00 --right-of DVI-I-1-1
    #sudo xrandr --output DVI-I-1-1 --mode 1920x1080_60.00 --right-of eDP-1 --output DVI-I-2-2 --mode 1920x1080_60.00 --right-of DVI-I-1-1
}

gohd1() {
    sudo xrandr --newmode "1920x1080_60.00"  148.50  1920 2008 2052 2200  1080 1084 1089 1125 +hsync +vsync
    sudo xrandr --addmode DVI-I-1-1 "1920x1080_60.00" --addmode DVI-I-2-2 "1920x1080_60.00"
}

list_colours() {
   for((i=16; i<256; i++)); do
      printf "\e[48;5;${i}m%03d" $i;
      printf '\e[0m';
      [ ! $((($i - 15) % 6)) -eq 0 ] && printf ' ' || printf '\n'
   done
}

sudof() {
   # From https://unix.stackexchange.com/a/269080/173210
   sudo bash -c "$(declare -f $1); $1"
}

# What I want:
# 1) If:
# - branch does not have remote tracking
# - there is exactly one remote configured
# - the local branch name does not exist on the remote
# then:
# - automatically set the tracking to remote/branch on a default 'git push'
# 2) Be able to do this with the standard 'git push' command without resorting to
# changing the command in any way.
#
# Git wrapper because _this is the __only__ way to accomplish auto-tracking
# setup_. ffs
#
# post-checkout hook is too early:
#   - 'git branch --set-upstream-to' fails because the remote branch doesn't
#     exist
#   - 'git config branch.<name>.remote' fails because the branch then shows up
#     as 'gone', which is accurate but not desired
#
# pre-push hook is too late:
#   - by the time it runs the remote has already been connected to, which means
#     the branch was already set up correctly...  and if it wasn't then the hook
#     never runs
#
# git does not allow over-riding builtin commands with git aliases. They can be
# configured but will be behind the builtin commands in execution priority so
# will never run.
#
git() {
    local orig_git="$(which git)"
    local param_string
    local repo_remotes
    local repo_remote
    local local_branch
##    local branch__remote
    local branch__merge
    local PRINT_TIP=0

    # Check if Stu needs to know what went wrong
    # -v not currently in use by bare-git
    if [ "$1" == "-v" ]; then
        local PRINT_TIP=1
        shift
    fi

    # Assume that $1 is the command, push, help, etc
    if [ "$1" != "push" ]; then
        [ $PRINT_TIP -eq 1 ] && echo "stu's git: Not a push attempt"
        "$orig_git" "$@"
        return
    fi

    # Stringify parameters for argument checking
    # From https://stackoverflow.com/a/46206604/1352761
    printf -v param_string -- ",,%q" "$@"
    param_string="${param_string},,"

    if [[ "${param_string}" =~ ,,-u,, ]] ||
                [[ "${param_string}" =~ ,,--set-upstream,, ]]; then
        [ $PRINT_TIP -eq 1 ] && echo "stu's git: Already setting the upstream tracking"
        "$orig_git" "$@"
        return
    fi

    repo_remotes=( $("$orig_git" remote show) )
    if [ ${#repo_remotes[@]} -ne 1 ]; then
        # Can't know which remote to use if there are more than one
        # Zero remotes is a bare or broken repository
        [ $PRINT_TIP -eq 1 ] && echo "stu's git: Multiple remotes available, unable to safely choose which one to use"
        "$orig_git" "$@"
        return
    fi
    repo_remote="${repo_remotes[0]}"

    local_branch="$("$orig_git" symbolic-ref --short HEAD)"

# I had a branch that had name.remote configured but not name.merge. This check
# deferred to git, which failed the push due to no upstream tracking.
# For now it looks like checking name.remote is unnecessary, name.merge is
# sufficient to determine if upsteam tracking is set. Commented out.
##    branch__remote="$("$orig_git" config branch.${local_branch}.remote)"
##    if [ -n "$branch__remote" ]; then
##        # remote already configured, nothing to do
##        [ $PRINT_TIP -eq 1 ] && echo "stu's git: Upstream tracking already configured (${local_branch}.remote)"
##        "$orig_git" "$@"
##        return
##    fi

    branch__merge="$("$orig_git" config branch.${local_branch}.merge)"
    if [ -n "$branch__merge" ]; then
# Detect a branch rename, and offer to rename the remote?
        # merge already configured, nothing to do
        [ $PRINT_TIP -eq 1 ] && echo "stu's git: Upstream tracking already configured (${local_branch}.merge)"
        "$orig_git" "$@"
        return
    fi

    "$orig_git" ls-remote --exit-code . "${repo_remote}/${local_branch}" > /dev/null
    ret=$?
    if [ $ret != 2 ]; then
        # remote already has a branch of the same name, let git handle things
        [ $PRINT_TIP -eq 1 ] && echo "stu's git: Remote already has a branch with the same name"
        "$orig_git" "$@"
        return
    fi

    # Made it! There is
    # - an active push
    # - that isn't setting its own tracking
    # - for a branch that doesn't already have tracking
    # - where there isn't a conflict with a remote branch

    # Set the tracking
    # TODO: Handle other paramters from original command here
    [ $PRINT_TIP -eq 1 ] && echo "stu's git: SUCCESS, setting upstream tracking automatically"
    "$orig_git" push --set-upstream "$repo_remote" "$local_branch"
}

sfind() {
    sudo find "$1" -iname "$2" "${@:3}" -print0 2> /dev/null | xargs -0r ls -alFd
}

# https://superuser.com/a/609141/609934
# function that:
# - runs the add user to group
# - updates /etc/sudoers to allow password less su
# - does the 'exec su -l $USER'
# - restores /etc/sudoers
# Thus making the sudo password be required for the sudoers update not the exec command,
# where getting the password wrong loses the whole terminal

reset_usb() {
    for i in /sys/bus/pci/drivers/[uoex]hci[-_]hcd/*:*; do
        [ -e "$i" ] || continue
        dev="${i##*/}"
        path="${i%/*}"
        echo "$dev" | sudo tee "$path/unbind"
        echo "$dev" | sudo tee "$path/bind"
    done
}

# From https://unix.stackexchange.com/a/155540/173210
crstat() {
    for f in "$@"; do
        inode=$(ls -di "$f" | cut -d' ' -f1)
        fs=$(df "$f" | tail -1 | cut -d' ' -f1)
        crtime=$(sudo debugfs -R 'stat <'"$inode"'>' "$fs" 2> /dev/null | grep -oP 'crtime.*--\s*\K.*')
        printf "%s\t%s\n" "$crtime" "$f"
    done
}

downscale() {
    local file="$1"
    local name="${file%.*}"
    local ext="${file##*.}"
    local quality="$2"

    convert "$file" -quality "$quality" "${name}_${quality}quality.${ext}"
}

owatch() {
    if [ "$1" = "-n" ]; then
        shift
        delay="$1"
        shift
    fi

    while true; do
        printf "\r%s" "$("$@")"
        if [ ! -z "$delay" ]; then
            sleep "$delay"
        fi
    done
    printf "\n"
}

apt-list-installed() {
    zgrep --color=always --no-filename " install " /var/log/dpkg.log* | sort
}
apt-list-upgraded() {
    zgrep --color=always --no-filename " upgrade " /var/log/dpkg.log* | sort
}

getvbox() {
    [ -n "$1" ]  || (echo "Missing version number"; exit 1)
    wget --mirror "https://download.virtualbox.org/virtualbox/$1/"
}

setlocale() {
    export LC_ALL="$1" LANG="$1" LANGUAGE="$1"
}

mklink() {
    # 1 = source, 2 = dest path, 3 = renamed dest (optional)
    ##SRC_NAME="${1##*/}"
    ##SRC_PATH="${1%/*}"
    SOURCE="$(readlink -f "$1")"
    if [ -n "$3" ]; then
        DEST="$(readlink -f "$2/$3")"
    else
        DEST="$(readlink -f "$2")"
    fi
    ln -s "$SOURCE" "$DEST"
}

btprofile() {
    # Helpful info
    # https://dev.to/ugjka/switch-between-hsp-hfp-and-a2dp-from-system-tray-g6b
    # https://forums.linuxmint.com/viewtopic.php?p=1650517#p1650517

    # Find your card with: pactl list cards
    local btcard="bluez_card.94_DB_56_54_74_2D"
    local profile="${1,,}"

    case "$profile" in
        a2dp)
            profile="a2dp_sink"
            ;;
        hfp)
            profile="headset_head_unit"
            ;;
        '')
#        ''|swap)
            # TODO: Add a swap/toggle target
            pactl list cards | awk 'found==1 && /Active Profile: .*/ { print $3 } /Name: '${btcard}'/ { found=1 }'
            return 0
            ;;
        *)
            echo "Unknown profile '${1}'"
            return 1
            ;;
    esac

    pactl set-card-profile "${btcard}" "${profile}"
}

mtp() {
    local op="${1,,}"

    local sys_file="/sys/bus/usb/drivers_autoprobe"

    # Get sudo password if required
    sudo -v -S

    case "$op" in
        on)
            echo 1 | sudo tee "$sys_file"
            ;;
        off)
            echo 0 | sudo tee "$sys_file"
            ;;
        '')
            cat "$sys_file"
            ;;
        -h|--help)
            echo "mtp [-h|--help] [on|off]"
            echo
            echo "NOTE: This utility requires sudo, which may prompt for credentials"
            echo
            echo "Turn MTP probing of USB devices on or off"
            echo "With no arguments, display the current state"
            ;;
        *)
            echo "ERROR: Unknown argument '$1'"
            return 1
            ;;
    esac
}

#sgrep() {
    # Saving grep, save results for later reuse
    # Add and handle --save-file
    # grep "args" --exclude='save_file' | tee 'save_file'
#}

# headtail: From https://stackoverflow.com/a/44849814/1352761

# Associating the publickey in /var/log/auth.log with authorized_keys:
# From https://serverfault.com/a/888300/432437
# ssh-keygen -lf ~/.ssh/authorized_keys # gives the whole list, then match with the log

# Bash parsing arguments
# https://stackoverflow.com/a/14203146/1352761

# Use parallel-ssh with a sudo command
# read -s -p "Password: "; echo "$REPLY" | pssh --send-input -x '-tt' --inline --host " host1 host2 " " sudo ls -alF "

# Repeat string in bash script
# https://stackoverflow.com/a/5349842/1352761

# Remap UID/GIDs on a mounted device
# Takes up two mount points, c'est la vie
# sudo bindfs --map=1000/1001:@1000/@1001 /media/smacdonald/data3-ssd /mnt/data3

dump_mint_versions() {
    echo "=====[ uname -a ]=================================================================="
    uname -a
    echo
    echo "=====[ lsb_release -a ]============================================================"
    lsb_release -a
    echo
    echo "=====[ /etc/debian_version ]======================================================="
    cat /etc/debian_version
    echo
    echo "=====[ /etc/linuxmint/info ]======================================================="
    cat /etc/linuxmint/info
    echo
    echo "=====[ /etc/os-release ]==========================================================="
    cat /etc/os-release
    echo
}

if [ -f ~/.stulocalrc ]; then
    . ~/.stulocalrc
fi
