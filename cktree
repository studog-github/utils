#!/usr/bin/perl -w

use strict;
use File::Basename;
use Fcntl ':mode';

#
# Checks one tree against another more thoroughly than diff.
#

# Global version string
my $version = "2.04";
my $date = "Jan 03 2017";

# Program's canonical name
my $this = basename($0);

#
# History
#
# 2.04  03 Jan 2017  stuartm
#
# Discovered a long-standing bug in the directory entry comparison code. When an
#   entry has changed types (say a link has become a file as a result of a copy
#   operation) this is reported but then the entries are attemped to be
#   compared anyway. The ttos() call has changed the numeric type to a string
#   type and that causes perl to throw an 'Argument "file" isn't numeric in
#   numeric eq' error.
#   I must have reordered this code at one point and failed to account for the
#   ttos() call changing the variable; probably inserted the permissions check
#   into a large if/elif construct and broke out the top if into its own case.
#   Added a flag to skip comparing if the types are different. The code is more
#   elegant if its reordered to do the permissions check first, then the types
#   check and compares as a single large if/else block, but, the output reads
#   less well for the user; they'd see the permssions output first, then the
#   type change which is a backwards in my opinion.
# Typo: tricker => trickier
#
# 2.03  30 Aug 2010  stuartm
#
# The bare-word directory handle in find() causes warnings on newer
#   versions of perl. This appears to be because the bare-word handle
#   is not protected from recursion, where local variables are simply
#   shadowed. Changed from a bare-word to a local variable, and all is
#   happy again.
#
# 2.02  05 May 2010  stuartm
#
# Added the esc() routine from mksdk. It's used to protect the
# filenames in the diff(1) call.
#
# 2.01  08 May 2006  stuartm
#
# Added the -p flag to the diff command. Enhances the readbility of
# output.
#
# 2.00  11 Apr 2005  stuartm
#
# Second draft. No longer relies on find. Find doesn't have an
# invocation pattern such that it will return all files within a
# specified dir without either a) losing the top-level .* files or
# b) appending the dir name on the front of every file. a) causes
# incorrect results and b)...  The find() contained herein is destined
# for the SDK generation script, and b) comes from there.
#
# 1.00  04 Apr 2005  stuartm
#
# First draft.
#

#
# Functions
#

# find(1) rewritten in perl
sub find {
  my $dir = shift;
  my $dir_h;
  my $fullpath;
  my @files;
  my @subfiles;

  if (!(opendir $dir_h, $dir)) {
    warn "$this: Error: Couldn't open '$dir'\n";
    die "$this: Error: $!\n";
  }
  for (readdir $dir_h) {
    if (/^\.\.?$/) {
      next;
    }
    push @files, $_;
    $fullpath = $dir . "/" . $_;
    if ((! -l $fullpath) && (-d $fullpath)) {
      @subfiles = find($fullpath);
      while (@subfiles) {
        push @files, $_ . "/" . shift @subfiles;
      }
    }
  }
  closedir $dir_h;

  return @files;
}

# type to string; translates a file's type to a readable string
sub ttos {
  my $type = shift;

  if ($type == S_IFBLK) {
    return "block device";
  } elsif ($type == S_IFCHR) {
    return "character device";
  } elsif ($type == S_IFDIR) {
    return "directory";
  } elsif ($type == S_IFREG) {
    return "file";
  } elsif ($type == S_IFLNK) {
    return "link";
  } elsif ($type == S_IFIFO) {
    return "fifo";
  } elsif ($type == S_IFSOCK) {
    return "socket";
  }
}

#
# Dealing with interpolation is always annoying. The following is the
# set of characters that must be escaped in filenames in unix. If they
# are not, the shell will interpret them, mangling the filename. For
# an rm command, this can be dangerous. Some of the characters are
# standard escaped characters, \n and \t. The " $ @ \ characters must
# all be escaped here as well, to counter the interpolation of the
# double-quoted string at the Perl level.
#
my $unix_esc_chars = "\t\n !\"\$&'()*:;<=>?\@[\\`{|";

# Escape a filename
sub esc {
  if (defined($_[0])) {
    #
    # The \Q \E is critical around the character set variable;
    # otherwise the set is interpolated, and the \ will be dropped as
    # escaping whatever follows it.
    #
    if ($_[0] =~ /[\Q$unix_esc_chars\E]/) {
      #
      # Search for all 's in the string and escape them with
      # backslashes.
      #
      $_[0] =~ s/'/\\'/g;
      #
      # This one's trickier:
      # (             - make a capture/group
      #  (?:          - make a group without making a capture
      #     [^'\\]    - match a class consisting of *not* a single
      #                 quote or backslash
      #           |   - or (of the non-capture group)
      #     \\        - match a backslash...
      #       (?!')   - *not* followed by a single quote; see perlre
      #  )            - close the non-capture group
      #   +           - match one or more of the non-capture group
      # )             - close the capture group
      #
      # This should match all sequences of text that's not the escaped
      # single quotes generated by the previous s///, and enclose them
      # in single quotes.
      #
      $_[0] =~ s/((?:[^'\\]|\\(?!'))+)/'$1'/g;
    }
  } else {
    if (/[\Q$unix_esc_chars\E]/) {
      s/'/\\'/g;
      s/((?:[^'\\]|\\(?!'))+)/'$1'/g;
    }
  }
}

#
# Main
#

my ($tree1, @files1, $path1, $type1, $perm1, $link1);
my ($tree2, @files2, $path2, $type2, $perm2, $link2);
my $skip_compare;

while (@ARGV) {
  $_ = shift;
  if (/^-h$/) {
    print "$this v$version $date\n";
    print "\n";
    print "$this -h\n";
    print "$this tree1 tree2\n";
    print "\n";
    print "-h\t\tHelp\n";
    print "tree1, tree2\tCheck tree1 against tree2\n";
    exit 0;
  } elsif (!defined($tree1)) {
    { local $/ = "/"; chomp($tree1 = $_); }
  } elsif (!defined($tree2)) {
    { local $/ = "/"; chomp($tree2 = $_); }
  } else {
    print "$this: Error: Bad option '$_'.\n";
    die "'$this -h' for help.\n";
  }
}

if (!defined($tree1)) {
  print "$this: Error: Missing argument 'tree1'\n";
  die "'$this -h' for help.\n";
} elsif (!defined($tree2)) {
  print "$this: Error: Missing argument 'tree2'\n";
  die "'$this -h' for help.\n";
} elsif (! -d $tree1) {
  print "$this: Error: '$tree1' not a directory\n";
  die "'$this -h' for help.\n";
} elsif (! -d $tree2) {
  print "$this: Error: '$tree2' not a directory\n";
  die "'$this -h' for help.\n";
}

@files1 = sort(find($tree1));
@files2 = sort(find($tree2));

while (@files1 && @files2) {
  if ($files1[0] lt $files2[0]) {
    print "Only in $tree1: $files1[0]\n";
    shift @files1;
  } elsif ($files1[0] gt $files2[0]) {
    print "Only in $tree2: $files2[0]\n";
    shift @files2;
  } else {
    $type1 = S_IFMT((lstat("$tree1/$files1[0]"))[2]);
    $perm1 = S_IMODE((lstat(_))[2]);
    $type2 = S_IFMT((lstat("$tree2/$files2[0]"))[2]);
    $perm2 = S_IMODE((lstat(_))[2]);
    if ($type1 != $type2) {
      $type1 = ttos($type1);
      $type2 = ttos($type2);
      print "Types differ: $files2[0]: In $tree1: $type1; " .
                                                        "In $tree2: $type2\n";
      $skip_compare = 1;
    } else {
      $skip_compare = 0;
    }
    if ($perm1 != $perm2) {
      $perm1 = sprintf("%o", $perm1);
      $perm2 = sprintf("%o", $perm2);
      print "Perms differ: $files2[0]: In $tree1: $perm1; " .
                                                      "In $tree2: $perm2\n";
    }
    if (!$skip_compare) {
      if ($type2 == S_IFLNK) {
        $link1 = readlink("$tree1/$files1[0]");
        $link2 = readlink("$tree2/$files2[0]");
        if ($link1 ne $link2) {
          print "Links differ: $files2[0]: In $tree1: $link1; " .
                                                        "In $tree2: $link2\n";
        }
      } elsif ($type2 == S_IFREG) {
        esc $path1 = "$tree1/$files1[0]";
        esc $path2 = "$tree2/$files2[0]";
        for (`diff -aupb $path1 $path2`) {
          print;
        }
      }
    }
    shift @files1;
    shift @files2;
  }
}
for (@files1) {
  print "Only in $tree1: $_\n";
}
for (@files2) {
  print "Only in $tree2: $_\n";
}
