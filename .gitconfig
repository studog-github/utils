# --system: /etc/gitconfig
# --global: ~/.gitconfig or ~/.config/git/config
# in repo aka --local: .git/config

# Prefer settings based on organization
# includeIf requires v2.13+
[includeIf "gitdir:~/work/"]
	path = ~/.gitconfig-work
[includeIf "gitdir:~/personal/"]
	path = ~/.gitconfig-personal

[core]
	autocrlf = input
	safecrlf = true
	editor = vim
[alias]
	co = checkout
	st = status
	sti = status --ignored
	rst = -c status.relativePaths=false status
	cp = cherry-pick -x
	k = log --graph --abbrev-commit --pretty=oneline --decorate
	difft = difftool
	root = "!git rev-parse --show-toplevel"
# Oldest common ancestor, useful when bisecting
#	oca = "!f() {  \
#                   b1 =   \
#                   b2 =   \
#                   diff -U1 <(git rev-list --first-parent feature/on-board-sdlc) <(git rev-list --first-parent release/v1.4.2) | tail -n1  \
#               }; f"
	br = "!f() {  \
                  if [ -z \"$1\" ] || [ \"$1\" = \"-v\" ] || [ \"$1\" = \"-vv\" ]; then  \
                      width=$(git for-each-ref --format='%(refname:lstrip=2)' refs/heads | wc -L);  \
                      if [ \"$1\" = \"-v\" ]; then  \
                          git for-each-ref --format=\"%(HEAD) %(if)%(HEAD)%(then)%(color:green)%(end)%(align:left,$width)%(refname:lstrip=2)%(end)%(color:reset) %(objectname:short) %(if)%(upstream:track,nobracket)%(then)[%(color:red)%(upstream:track,nobracket)%(color:reset)]%(end)%(subject)\" refs/heads/;  \
                      else  \
                          git for-each-ref --format=\"%(HEAD) %(if)%(HEAD)%(then)%(color:green)%(end)%(align:left,$width)%(refname:lstrip=2)%(end)%(color:reset) %(objectname:short) %(if)%(upstream)%(then)[%(color:blue)%(upstream:short)%(color:reset)%(if)%(upstream:track,nobracket)%(then): %(color:red)%(upstream:track,nobracket)%(color:reset)%(end)] %(end)%(subject)\" refs/heads/;  \
                      fi;  \
                  else  \
                      git branch \"$@\";  \
                  fi;  \
              }; f"
	unadd = reset HEAD
# Cache the fsck --unreachable output, then filter every time
# Refactor orpahs and orphan-tags to use common code
# Relating to https://stackoverflow.com/a/57095939/1352761
	orphans = "!f() {  \
	               local tmp_file=$(mktemp);  \
	               local cache_file=\".git/orphaned_commits\";  \
                       if [ \"$1\" = \"-d\" ] || [ \"$1\" = \"--delete-cache\" ]; then  \
	                   rm -f \"$cache_file\";  \
	                   return;  \
	               fi;  \
	               if [ \"$1\" = \"-r\" ] || [ \"$1\" = \"--rebuild-cache\" ]; then \
	                   rm -f \"$cache_file\";  \
	               fi;  \
	               if [ ! -f \"$cache_file\" ]; then  \
                           echo \"Please be patient, this might take a while...\";  \
	                   git fsck --unreachable | grep commit | cut -d' ' -f3 > \"$tmp_file\";  \
	                   mv \"$tmp_file\" \"$cache_file\";  \
	               fi;  \
	               xargs --arg-file=\"$cache_file\" --no-run-if-empty git log --merges --no-walk;  \
                   }; f"
	restash = "update-ref --create-reflog refs/stash"
	orphan-tags = "!f() {  \
	               local tmp_file=$(mktemp);  \
	               local cache_file=\".git/orphaned_tags\";  \
                       if [ \"$1\" = \"-d\" ] || [ \"$1\" = \"--delete-cache\" ]; then  \
	                   rm -f \"$cache_file\";  \
	                   return;  \
	               fi;  \
	               if [ \"$1\" = \"-r\" ] || [ \"$1\" = \"--rebuild-cache\" ]; then \
	                   rm -f \"$cache_file\";  \
	               fi;  \
	               if [ ! -f \"$cache_file\" ]; then  \
                           echo \"Please be patient, this might take a while...\";  \
	                   git fsck --unreachable | grep tag | cut -d' ' -f3 > \"$tmp_file\";  \
	                   mv \"$tmp_file\" \"$cache_file\";  \
	               fi;  \
	               xargs --arg-file=\"$cache_file\" --no-run-if-empty git show --no-patch;  \
                   }; f"
	retag = "update-ref --create-reflog refs/tags"
# git update-ref refs/tags/NAME KEY
        unsaved = "!f() {  \
                    echo '=====[ Unpushed commits ]==================================================';  \
                    git branch -v;  \
                    echo '=====[ Uncommited work ]===================================================';  \
                    git status;  \
                    echo '=====[ Uncommited stashes ]================================================';  \
                    git stash list;  \
                    echo '=====[ Unpushed tags ]=====================================================';  \
                    git push --tags --dry-run;  \
                   }; f"
[push]
	default = simple
[diff]
	tool = vimdiff
	algorithm = histogram
[difftool]
	prompt = false
[transfer]
	fsckObjects = true
[fetch]
	prune = true
[mergetool "vimdiff3"]
	cmd = vim -f -d -c \"wincmd J\" \"$MERGED\" \"$LOCAL\" \"$BASE\" \"$REMOTE\"
[merge]
	tool = vimdiff3
[rerere]
	enabled = true
[commit]
	cleanup = scissors
